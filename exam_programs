1.	1) Create the student.csv dataset with 2 columns (no. of Hours, Freshmen_Score) and 10 rows then create linear regression model. Plot the graph.
# Create student.csv
student <- data.frame(
  Hours = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
  Score = c(50, 55, 60, 65, 70, 76, 80, 85, 88, 95)
)
write.csv(student, "student.csv", row.names = FALSE)

# Linear regression
model <- lm(Score ~ Hours, data = student)
summary(model)

# Plot
plot(student$Hours, student$Score, col = "blue", pch = 19, main = "Linear Regression")
abline(model, col = "red", lwd = 2)

2.	2) Demonstrate the relationship between predictor and response variables (height vs weight).
height <- c(150,155,160,165,170,175,180,185,190,195)
weight <- c(50,53,58,60,65,68,72,76,80,85)
relation <- lm(weight ~ height)
summary(relation)

# Predict new weight
new_height <- data.frame(height = c(160, 175, 190))
predict(relation, new_height)

# Plot regression line
plot(height, weight, main = "Height vs Weight", col = "darkgreen", pch = 19)
abline(relation, col = "red", lwd = 2)

3.	3) Create employee dataset and perform prediction using logistic regression.
employee <- data.frame(
  Experience = c(1,3,5,7,9,11,13,15,17,19),
  Selected = c(0,0,0,1,0,1,1,1,1,1)
)
model_log <- glm(Selected ~ Experience, data = employee, family = binomial)
summary(model_log)
plot(employee$Experience, employee$Selected, col = "blue", pch = 19)
lines(employee$Experience, predict(model_log, type="response"), col="red")

4.	4) Create a 4x4 matrix and write a program to calculate Euclidean, Manhattan, and Minkowski distances.
mat <- matrix(1:16, nrow = 4)
dist_euclidean <- dist(mat, method = "euclidean")
dist_manhattan <- dist(mat, method = "manhattan")
dist_minkowski <- dist(mat, method = "minkowski", p = 3)
dist_euclidean; dist_manhattan; dist_minkowski

5.	5) Write a program to calculate distance between Honda Civic and Camaro Z28 attributes in mtcars dataset.
data(mtcars)
subset <- mtcars[c("Honda Civic","Camaro Z28"),]
dist(subset, method = "euclidean")

6.	6) Create a 10x10 matrix and write a program to perform Hierarchical Clustering.
set.seed(1)
mat <- matrix(rnorm(100), nrow = 10)
dist_mat <- dist(mat)
hc <- hclust(dist_mat)
plot(hc, main = "Hierarchical Clustering Dendrogram")

7.	7) Create a 4x4 matrix and write a program to perform K-Means Clustering.
mat <- matrix(rnorm(16), nrow = 4)
km <- kmeans(mat, centers = 2)
print(km)
plot(mat, col = km$cluster, pch = 19, main = "K-Means Clustering")

8.	8) Write a program to perform plotting functions (plot, hist, pie, barplot, stripchart).
x <- 1:5; y <- c(2,4,6,8,10)
plot(x, y, type="b", main="Plot")
hist(y, main="Histogram")
pie(y, main="Pie Chart")
barplot(y, main="Bar Plot")
stripchart(y, main="Strip Chart", method="stack")

9.	9) Write a program to implement the concept of filter() command.
x <- 1:20
filtered <- filter(x, rep(1/3, 3))  # Moving average filter
print(filtered)
plot(x, type='l', main='Filter Function Example')
lines(filtered, col='red')

10.	10) Write a program to read time series data using scan() and ts() functions.
data <- ts(c(100,120,130,150,160,170,180,190), start = c(2020,1), frequency = 12)
plot.ts(data, main="Time Series Data")
summary(data)

11.	11) Write a program to perform decomposing time series using SMA() with high value order of smoothness.
library(TTR)
data <- ts(rnorm(24,100,10), frequency = 12)
sma <- SMA(data, n = 3)
plot.ts(cbind(data, sma), main="Simple Moving Average", col=c("blue","red"))

12.	12) Write a program to perform seasonally adjusting data using difference method.
data <- ts(c(120,130,140,150,160,170,180,190,200,210,220,230), frequency = 12)
diff_data <- diff(data, differences = 1)
plot.ts(diff_data, main="Seasonally Adjusted (Differenced) Data")

